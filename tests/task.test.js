const request=require('supertest')
const Task=require('../src/models/task')
const app=require('../src/app')
const {userOneId,userOne,userTwoId,userTwo,setupDatabase}=require('./fixtures/db')
const {taskOne,taskTwo,taskThree}=require('./fixtures/db')
beforeEach(setupDatabase)
test('should create a task',async()=>{
    const response=await request(app)
        .post('/tasks')
        .set("Authorization",`Bearer ${userOne.tokens[0].token}`)
        .send({description:"having a cup of tea!"})
        .expect(201)
    const task=await Task.findById(response.body._id)
    expect(task).not.toBeNull()
    expect(task.completed).toEqual(false)
    expect(task.owner).toEqual(userOneId)
})
test('should get all user tasks',async()=>{
    const response=await request(app)
        .get('/tasks')
        .set('Authorization',`Bearer ${userOne.tokens[0].token}`)
        .expect(200)
    expect(response.body.length).toEqual(2)
})
test('should not delete any task by other user',async()=>{
    const response=await request(app)
        .delete(`/tasks/${taskOne._id}`)
        .set('Authorization',`Bearer ${userTwo.tokens[0].token}`)
        .send()
        .expect(404)
    const task=await Task.findById(taskOne._id)
    expect(task).not.toBeNull()
})
test('should delete task',async()=>{
    const response=await request(app)
        .delete(`/tasks/${taskOne._id}`)
        .set('Authorization',`Bearer ${userOne.tokens[0].token}`)
        .send()
        .expect(200)
    const task=await Task.findById(taskOne._id)
    expect(task).toBeNull()
})